export const first = <I = unknown, O extends I = I>(
  filter?: BFChainUtil.ReactiveStream.Filter<I, O>,
): BFChainUtil.ReactiveStream.Map<I, O> => {
  if (typeof filter === "function") {
    return ((event) => {
      if (filter(event.data, event.index, event.target)) {
        event.statement = "return";
        return event.data;
      }
      //   return (event.statement = "continue");
      return event.data;
    }) as BFChainUtil.ReactiveStream.Map<I, O>;
  }
  return ((event) => {
    return event.data;
  }) as BFChainUtil.ReactiveStream.Map<I, O>;
};

first((item: { age: number } | { name: string }): item is { age: number } => {
  return "age" in item;
});


new ReadableStream({
    start(ctrl){
        ctrl.enqueue()
    }
})